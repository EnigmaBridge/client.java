package com.enigmabridge;

import com.enigmabridge.misc.EBTestingUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.*;

import static org.testng.Assert.*;

/**
 * Created by dusanklinec on 06.05.16.
 */
public class EBGenRandomCallIT {
    private static final Logger LOG = LoggerFactory.getLogger(EBGenRandomCallIT.class);

    // General engine - common
    private final EBEngine engine = new EBEngine();

    // EBSettings - defaults.
    private EBSettingsBase defaultSettings;

    // RSA UOs comm keys
    private EBCommKeys ck;

    public EBGenRandomCallIT() {

    }

    @BeforeClass
    public static void setUpClass() throws Exception {
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @BeforeMethod(alwaysRun = true, groups = {"integration"})
    public void setUpMethod() throws Exception {
        defaultSettings = new EBSettingsBase.Builder()
                .setApiKey(EBTestingUtils.API_KEY)
                .setEndpointInfo(new EBEndpointInfo(EBTestingUtils.CONNECTION_STRING))
                .build();

        engine.setDefaultSettings(defaultSettings);

        ck = new EBCommKeys()
                .setEncKey("1234567890123456789012345678901234567890123456789012345678901234")
                .setMacKey("2224262820223456789012345678901234567890123456789012345678901234");
    }

    @AfterMethod(alwaysRun = true, groups = {"integration"}, enabled = false)
    public void tearDownMethod() throws Exception {
    }

    @Test(groups = {"integration"}) //, timeOut = 100000
    public void testCall() throws Exception {
        LOG.trace("### UT ## EBGetPubKeyCallIT::testCall ## BEGIN ###");

        try {
            // Create UOKey
            final UserObjectInfoBase uo = new UserObjectInfoBase.Builder()
                    .setUoid(EBTestingUtils.UOID_RANDOM)
                    .setUserObjectType(UserObjectType.TYPE_RANDOM)
                    .setCommKeys(ck)
                    .build();

            final EBGenRandomCall call = new EBGenRandomCall.Builder()
                    .setUo(uo)
                    .setEngine(engine)
                    .build();

            EBGenRandomResponse response = null;

            // Basic call.
            for(int i=0; i<3; i++) {
                final int toGenerate = 1 + (int)Math.floor(Math.random() * 120);

                response = call.genRandom(toGenerate);
                assertNotNull(response, "Response is null");
                assertNotNull(response.getRawResponse(), "Raw response is null");
                assertTrue(response.isCodeOk(), "Response code is not OK");
                assertTrue(response.getRawResponse().isSuccessful(), "HTTP request was not successful");
                assertNotNull(response.getData(), "Random data is null");
                assertEquals(response.getData().length, toGenerate, "Number of generated bytes does not match");
            }

            // Another call, another method.
            final byte[] bytes = call.genRandomData(32);
            assertEquals(bytes.length, 32, "Number of generated bytes does not match");

        } catch (Exception ex){
            LOG.error("Exception in get import keys call", ex);
            assertTrue(false);
        }

        LOG.trace("### UT ## EBGetPubKeyCallIT::testCall ## END ###");
    }
}
